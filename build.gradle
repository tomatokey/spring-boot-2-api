plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
}

group = 'com.prototype'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	// SpringBoot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// DB
	runtimeOnly 'mysql:mysql-connector-java'
	// Swagger
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// テスト
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// サポートツール
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

/**
 * ローカル環境用のdockerを起動
 */
task dockerComposeUp (type: Exec) {
	commandLine 'docker-compose','-f','docker-local/docker-compose.yml','up','-d'
	doLast {
		// dockerが起動するまでスリープを設定
		Thread.sleep(5 * 1000)
	}
}

/**
 * ローカル環境用のdockerを停止
 */
task dockerComposeDown (type: Exec) {
	commandLine 'docker-compose', '-f', 'docker-local/docker-compose.yml', 'down', '--remove-orphans', '--volumes'
}

/**
 * ローカル環境の起動処理
 */
bootRun {
	systemProperty("spring.profiles.active", "local")
//	dependsOn(dockerComposeUp)
}

/**
 * war生成用コマンド
 * build/libs配下にwarは出力されます
 */
bootWar {
	archiveName("spring-boot-2-api.war")
}

/**
 * テストの実行処理
 */
test {
	useJUnitPlatform()
	dependsOn(dockerComposeUp)
	finalizedBy(dockerComposeDown)
}
